import { NextFunction, Request, Response } from "express";
import mongoose from "mongoose";
import Chapter from "../models/chapterModel";
import Subject from "../models/subjectModel";
import Grade from "../models/gradeModel";

interface IPostChapterPayload {
  subjectId?: string;     
  subjectName?: string;   
  grade?: number;         
  title: string;         
  question: any;         
}

export const postChapter = async (
  req: Request<{}, {}, IPostChapterPayload>,
  res: Response,
  next: NextFunction
) => {
  const session = await mongoose.startSession();

  try {
    const { subjectId, subjectName, grade, title, question } = req.body;

    //  ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
    if (!title || typeof title !== "string" || !title.trim()) {
      return res.status(400).json({
        success: false,
        message: "title ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
      });
    }

    if (!question) {
      return res.status(400).json({
        success: false,
        message: "question ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
      });
    }

    if (!subjectId && !subjectName) {
      return res.status(400).json({
        success: false,
        message: "subjectId ‡¶Ö‡¶•‡¶¨‡¶æ subjectName ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
      });
    }

    const questionsToAdd = Array.isArray(question) ? question : [question];

    //  Subject ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    let subjectDoc = null;

    if (subjectId) {
      if (!mongoose.Types.ObjectId.isValid(subjectId)) {
        return res.status(400).json({
          success: false,
          message: "subjectId ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü‡•§",
        });
      }
      subjectDoc = await Subject.findById(subjectId);
      if (!subjectDoc) {
        return res.status(404).json({
          success: false,
          message: `subject ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø (id: ${subjectId})‡•§`,
        });
      }
    } else {
      if (typeof grade !== "number") {
        return res.status(400).json({
          success: false,
          message: "subjectName ‡¶¶‡¶ø‡¶≤‡ßá grade (number) ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
        });
      }

      const gradeDoc = await Grade.findOne({ grade });
      if (!gradeDoc) {
        return res.status(404).json({
          success: false,
          message: `Grade ${grade} ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`,
        });
      }

      subjectDoc = await Subject.findOne({
        name: subjectName!.trim(),
        grade: gradeDoc._id,
      });

      if (!subjectDoc) {
        return res.status(404).json({
          success: false,
          message: `Subject "${subjectName}" Grade ${grade}-‡¶è ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`,
        });
      }
    }

    //  ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ
    session.startTransaction();

    const trimmedTitle = title.trim();

    // üîπ ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá Chapter ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶ø
    let chapterDoc = await Chapter.findOne({
      title: trimmedTitle,
      subject: subjectDoc._id,
    }).session(session);

    if (chapterDoc) {
      // ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶ü‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‚Üí ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßã
      const beforeCount = chapterDoc.questions.length;
      chapterDoc.questions.push(...questionsToAdd);
      await chapterDoc.save({ session });

      await session.commitTransaction();
      return res.status(200).json({
        success: true,
        message: `Chapter "${trimmedTitle}" ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ${questionsToAdd.length}‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
        data: {
          chapterId: chapterDoc._id,
          previousCount: beforeCount,
          newCount: chapterDoc.questions.length,
        },
      });
    }

    // üîπ ‡¶®‡¶§‡ßÅ‡¶® Chapter ‡¶§‡ßà‡¶∞‡¶ø
    const newChapter = new Chapter({
      title: trimmedTitle,
      grade: subjectDoc.grade,
      subject: subjectDoc._id,
      questions: questionsToAdd,
    });

    await newChapter.save({ session });

    // üîπ Subject-‡¶è ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó  (‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá)
    subjectDoc.chapters.push({
      chapterId: newChapter._id as mongoose.Types.ObjectId,
      title: newChapter.title,
    });
    await subjectDoc.save({ session });

    await session.commitTransaction();

    return res.status(201).json({
      success: true,
      message: `‡¶®‡¶§‡ßÅ‡¶® Chapter "${newChapter.title}" ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç Subject-‡¶è ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
      data: newChapter,
    });
  } catch (err: any) {
    await session.abortTransaction();

    if (err.code === 11000) {
      return res.status(409).json({
        success: false,
        message: "‡¶è‡¶ï‡¶á subject-‡¶è ‡¶è‡¶ï‡¶á ‡¶®‡¶æ‡¶Æ‡ßá Chapter ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ü‡¶õ‡ßá‡•§",
      });
    }

    next(err);
  } finally {
    session.endSession();
  }
};
